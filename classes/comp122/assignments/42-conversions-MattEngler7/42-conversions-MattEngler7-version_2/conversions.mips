# Task: Write a MIPS subroutine to convert a 32-bit unsigned number into a sequence of ASCII characters. Each of these ASCII characters are printed to stdout in turn.
# The ASCII string created on stdout will be the corresponding (unsigned) decimal number, written in reverse.
# The subroutine returns the number of characters printed.
# Name: percent_base_10
# File: conversion.s
# Declaration: int percent_base_10( int value)
# Semantics:
# - iteratively divides the input value by 10.
# - converts the remainder to ASCII
# - print outs the ASCII character to the stdout
# - returns the number of ASCII characters printed
# Edge Condition:
# - value = 0;
# Question:
# - Should you use a while, for, or do-while loop?
#

#this is starter code:
# Name: percent_base_10
# File: conversion.s
# Declaration: int percent_base_10( int value)
# Semantics:
# - iteratively divides the input value by 10.
# - converts the remainder to ASCII
# - print outs the ASCII character to the stdout
# - returns the number of ASCII characters printed
# Edge Condition:
# - value = 0;

# Starter Code:
.data #variable declaration section

.text #code section
.globl main
  
main: #main program starts from here
# $t1: count

li $a0,1234 # count = percent_base_10(1234)
jal percent_base_10 #call percent_base_10 function
move $t1, $v0 #$t1 = $v0( return value from function)

li $a0, '\n' # print_char('\n')
li $v0, 11 #syscall 11 to print character
syscall

move $a0, $t1 # print_int(count)
li $v0, 1 #syscall 1 to print integer
syscall

li $a0, 0 # exit(0)
li $v0, 17
syscall

percent_base_10:
# $v0: count
# $a0: value
li $t2,0 #count($t2) =0
move $t0,$a0 #$t0 = $a0(argument)
  
whileLoop:
       beqz $t0,printFromStack #if $t0(number)==0 jump to printFromStack label
       div $t0,$t0,10 #$t0 = $t0/10
       #reminder in $hi
       #quotient in $lo
       mfhi $a0 #reminder in $a0 = $hi(reminder) register
       addi $a0,$a0,48 #make a character $a0 = $a0+48 (48 ascii of '0')
       addu $sp,$sp,-4 #goes one address down of stack
      
       sb $a0,0($sp) #save last digit or reminder in stack
      
       #addi $a0,$a0,48 #make it character by adding ascii of '0'
       #li $v0,11 #syscall 11 to print character
       #syscall
      
       addi $t2,$t2,1 #$t2 = $t2+1
       j whileLoop #jump to whileLoop label
  
printFromStack:
  
   add $v0,$t2,$zero #$v0 = $t2+0
   move $t0,$t2 #$t0 = $t2(number of digits)
   secondLoop: #jump to secondLoop label
       beqz $t2,endSecondLoop
      
       lb $a0,0($sp)#get from stack in $a0
       addu $sp,$sp,4 #one address to stack
       li $v0,11 #syscall 11 to print char saved in $a0
       syscall
      
       addi $t2,$t2,-1 #decrement $t2
       j secondLoop #jump to secondLoop
      
   endSecondLoop:
       move $v0,$t0 #v0 = $t0(number of digits)
       #ra = address from this function called
       jr $ra #jump to address saved in $ra