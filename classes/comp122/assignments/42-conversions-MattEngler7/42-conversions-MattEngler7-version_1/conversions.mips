# Task: Write a MIPS subroutine to convert a 32-bit unsigned number into a sequence of ASCII characters.  Each of these ASCII characters are printed to stdout in turn.
# The ASCII string created on stdout will be the corresponding (unsigned) decimal number, written in reverse.
# The subroutine returns the number of characters printed.
# Name: percent_base_10
# File: conversion.s
# Declaration:  int percent_base_10( int value)
# Semantics:
#    - iteratively divides the input value by 10.
#    - converts the remainder to ASCII
#    - print outs the ASCII character to the stdout
#    - returns the number of ASCII characters printed
# Edge Condition:
#    - value = 0;
# Question: 
#    - Should you use a while, for, or do-while loop?
#
# Starter Code:
    .data #variable declaration section
.text
.globl main
main: #main program starts from here
# $t1: count


li $a0, 1234 # count(argument $a0) = percent_base_10(1234)
jal percent_base_10 #call function percent_baase_10
move $t1, $v0 #$t1 = $v0(number of printed on console)

    #print new line character
li $a0, '\n' # print_char('\n')
li $v0, 11 #syscall 11 to print character saved in $a0
syscall


move $a0, $t1 # print_int(count)
li $v0, 1 #syscall 1 to print integer saved in $a0
syscall


li $a0, 0 # exit(0)
li $v0, 17 #terminates with the value in $a0
syscall


percent_base_10:
# $v0: count
# $a0: value
li $t1,0 #count($t1) =0
  
move $t0,$a0 #$t0 = $a0(argument to function)
  
while:
       beqz $t0,returnBase10 #if $t0(number) equal to zero jump to returnBase10 label
       li $a1,10 #$a1 = 10
       div $t0,$a1
       #reminder in $hi and quotient in $lo
       mfhi $a0 #reminder in $a0 = from $hi register
       addi $a0,$a0,48 #make it character by adding ascii of '0'
       li $v0,11 #syscall 11 to print character
       syscall
      
      
       addi $t1,$t1,1 #number of element printed $t1 = $t1 + 1
       div $t0,$t0,10 #$t0 = $t0/10
       j while #jumps to the while "loop"
  
returnBase10:
   add $v0,$t1,$zero #$v0 = $t1 + 0
       #ra = address from this function called back with value
   jr $ra #goes to address saved in $ra